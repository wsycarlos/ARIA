/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Limbo.Net
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BaseMsg : TBase
  {
    private bool _boolVal;
    private sbyte _byteVal;
    private int _intVal;
    private double _doubleVal;
    private string _strVal;
    private byte[] _byteArrVal;
    private Dictionary<BaseMsg, BaseMsg> _mapVal;
    private List<BaseMsg> _listVal;
    private THashSet<BaseMsg> _setVal;

    /// <summary>
    /// 
    /// <seealso cref="VariableType"/>
    /// </summary>
    public VariableType MsgType { get; set; }

    public bool BoolVal
    {
      get
      {
        return _boolVal;
      }
      set
      {
        __isset.boolVal = true;
        this._boolVal = value;
      }
    }

    public sbyte ByteVal
    {
      get
      {
        return _byteVal;
      }
      set
      {
        __isset.byteVal = true;
        this._byteVal = value;
      }
    }

    public int IntVal
    {
      get
      {
        return _intVal;
      }
      set
      {
        __isset.intVal = true;
        this._intVal = value;
      }
    }

    public double DoubleVal
    {
      get
      {
        return _doubleVal;
      }
      set
      {
        __isset.doubleVal = true;
        this._doubleVal = value;
      }
    }

    public string StrVal
    {
      get
      {
        return _strVal;
      }
      set
      {
        __isset.strVal = true;
        this._strVal = value;
      }
    }

    public byte[] ByteArrVal
    {
      get
      {
        return _byteArrVal;
      }
      set
      {
        __isset.byteArrVal = true;
        this._byteArrVal = value;
      }
    }

    public Dictionary<BaseMsg, BaseMsg> MapVal
    {
      get
      {
        return _mapVal;
      }
      set
      {
        __isset.mapVal = true;
        this._mapVal = value;
      }
    }

    public List<BaseMsg> ListVal
    {
      get
      {
        return _listVal;
      }
      set
      {
        __isset.listVal = true;
        this._listVal = value;
      }
    }

    public THashSet<BaseMsg> SetVal
    {
      get
      {
        return _setVal;
      }
      set
      {
        __isset.setVal = true;
        this._setVal = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool boolVal;
      public bool byteVal;
      public bool intVal;
      public bool doubleVal;
      public bool strVal;
      public bool byteArrVal;
      public bool mapVal;
      public bool listVal;
      public bool setVal;
    }

    public BaseMsg() {
    }

    public BaseMsg(VariableType msgType) : this() {
      this.MsgType = msgType;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_msgType = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                MsgType = (VariableType)iprot.ReadI32();
                isset_msgType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                BoolVal = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Byte) {
                ByteVal = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                IntVal = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Double) {
                DoubleVal = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                StrVal = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                ByteArrVal = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Map) {
                {
                  MapVal = new Dictionary<BaseMsg, BaseMsg>();
                  TMap _map0 = iprot.ReadMapBegin();
                  for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                  {
                    BaseMsg _key2;
                    BaseMsg _val3;
                    _key2 = new BaseMsg();
                    _key2.Read(iprot);
                    _val3 = new BaseMsg();
                    _val3.Read(iprot);
                    MapVal[_key2] = _val3;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  ListVal = new List<BaseMsg>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    BaseMsg _elem6;
                    _elem6 = new BaseMsg();
                    _elem6.Read(iprot);
                    ListVal.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Set) {
                {
                  SetVal = new THashSet<BaseMsg>();
                  TSet _set7 = iprot.ReadSetBegin();
                  for( int _i8 = 0; _i8 < _set7.Count; ++_i8)
                  {
                    BaseMsg _elem9;
                    _elem9 = new BaseMsg();
                    _elem9.Read(iprot);
                    SetVal.Add(_elem9);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_msgType)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("BaseMsg");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "msgType";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)MsgType);
        oprot.WriteFieldEnd();
        if (__isset.boolVal) {
          field.Name = "boolVal";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(BoolVal);
          oprot.WriteFieldEnd();
        }
        if (__isset.byteVal) {
          field.Name = "byteVal";
          field.Type = TType.Byte;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(ByteVal);
          oprot.WriteFieldEnd();
        }
        if (__isset.intVal) {
          field.Name = "intVal";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(IntVal);
          oprot.WriteFieldEnd();
        }
        if (__isset.doubleVal) {
          field.Name = "doubleVal";
          field.Type = TType.Double;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(DoubleVal);
          oprot.WriteFieldEnd();
        }
        if (StrVal != null && __isset.strVal) {
          field.Name = "strVal";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(StrVal);
          oprot.WriteFieldEnd();
        }
        if (ByteArrVal != null && __isset.byteArrVal) {
          field.Name = "byteArrVal";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(ByteArrVal);
          oprot.WriteFieldEnd();
        }
        if (MapVal != null && __isset.mapVal) {
          field.Name = "mapVal";
          field.Type = TType.Map;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, MapVal.Count));
            foreach (BaseMsg _iter10 in MapVal.Keys)
            {
              _iter10.Write(oprot);
              MapVal[_iter10].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ListVal != null && __isset.listVal) {
          field.Name = "listVal";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ListVal.Count));
            foreach (BaseMsg _iter11 in ListVal)
            {
              _iter11.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SetVal != null && __isset.setVal) {
          field.Name = "setVal";
          field.Type = TType.Set;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.Struct, SetVal.Count));
            foreach (BaseMsg _iter12 in SetVal)
            {
              _iter12.Write(oprot);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("BaseMsg(");
      __sb.Append(", MsgType: ");
      __sb.Append(MsgType);
      if (__isset.boolVal) {
        __sb.Append(", BoolVal: ");
        __sb.Append(BoolVal);
      }
      if (__isset.byteVal) {
        __sb.Append(", ByteVal: ");
        __sb.Append(ByteVal);
      }
      if (__isset.intVal) {
        __sb.Append(", IntVal: ");
        __sb.Append(IntVal);
      }
      if (__isset.doubleVal) {
        __sb.Append(", DoubleVal: ");
        __sb.Append(DoubleVal);
      }
      if (StrVal != null && __isset.strVal) {
        __sb.Append(", StrVal: ");
        __sb.Append(StrVal);
      }
      if (ByteArrVal != null && __isset.byteArrVal) {
        __sb.Append(", ByteArrVal: ");
        __sb.Append(ByteArrVal);
      }
      if (MapVal != null && __isset.mapVal) {
        __sb.Append(", MapVal: ");
        __sb.Append(MapVal);
      }
      if (ListVal != null && __isset.listVal) {
        __sb.Append(", ListVal: ");
        __sb.Append(ListVal);
      }
      if (SetVal != null && __isset.setVal) {
        __sb.Append(", SetVal: ");
        __sb.Append(SetVal);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
